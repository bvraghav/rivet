#+TITLE: Training the CNN
#+PROPERTY: header-args:ipython :session /home/bvr/tmp/kernel-dp-ssh.json :results output

* Logging

#+BEGIN_SRC ipython
  import logging as lg
  lg.basicConfig(level=lg.DEBUG, format='%(levelname)-8s: %(message)s')
#+END_SRC

#+RESULTS:

* Adjacency List

#+NAME: adjacency_list
#+BEGIN_SRC ipython
  # Creating a simple adjacency list for a diamond on string:
  #         *
  #        / \
  #    *--*   *--*
  #        \ /
  #         *
  #
  adjacency = [
    (1,),
    (0, 2, 3),
    (1, 4),
    (1, 4),
    (2, 3, 5),
    (4,)
  ]

  adjacency
#+END_SRC

#+RESULTS: adjacency_list

* Unique Edges

#+BEGIN_SRC ipython
  import numpy as np
  # from copy import deepcopy as clone

  def uniq_edges(adjacency) :
    mask = [list(l) for l in adjacency]
    N = np.sum([len(l) for l in mask]) / 2
    N = int(N)
    edges = np.zeros([N, 2], dtype=np.int)

    ei = 0
    for i, l in enumerate(mask) :
      for j in l :
        # Remove i from mask
        lj = mask[j]
        ji = lj.index(i)
        mask[j] = lj[:ji] + lj[1+ji:]

        # Append to edges
        edges[ei] = [i, j]
        ei += 1

    return edges
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython
  edges = uniq_edges(adjacency)
  lg.info((edges.shape, edges.dtype))
  lg.info(edges)
#+END_SRC

#+RESULTS:
: INFO    : ((6, 2), dtype('int64'))
: INFO    : [[0 1]
:  [1 2]
:  [1 3]
:  [2 4]
:  [3 4]
:  [4 5]]

* Edge to Adjacency

#+BEGIN_SRC ipython
  edges = [[0,1],
           [1,2],
           [1,3],
           [2,4],
           [3,4],
           [4,5]]
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython
  def edge_to_adjacency(edges) :
    edges = np.array(edges)
    # lg.info((edges.shape, edges.dtype))
    adjacency = [[] for _ in range(1+np.max(edges))]

    for i, j in edges :
      # lg.info((i, j))
      if j in adjacency[i] :
        continue

      adjacency[i].append(j)
      adjacency[j].append(i)

    return adjacency

#+END_SRC

#+RESULTS:


#+BEGIN_SRC ipython
  adj = edge_to_adjacency(edges)
  lg.info(adj)
#+END_SRC

#+RESULTS:
: INFO    : [[1], [0, 2, 3], [1, 4], [1, 4], [2, 3, 5], [4]]


